name: Frontend CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npx eslint . --ext ts,tsx --max-warnings=200
      
      - name: Build
        run: npm run build
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKER_USERNAME }}/job_solution_frontend:latest
      
      - name: Deploy to server
        if: github.event_name != 'pull_request'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e
            
            cd ~
            
            # Настройка переменной окружения для сценариев
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            
            # Проверка существования docker-compose.yml
            if [ ! -f "docker-compose.yml" ]; then
              echo "Ошибка: docker-compose.yml не найден!"
              exit 1
            fi
            
            # Загрузка последнего образа фронтенда
            docker pull $DOCKER_USERNAME/job_solution_frontend:latest
            
            # Обновление конфигурации docker-compose для фронтенда
            # Создаём резервную копию
            cp docker-compose.yml docker-compose.yml.bak
            
            # Проверяем наличие сервиса frontend в docker-compose.yml
            if grep -q "frontend:" docker-compose.yml; then
              echo "Сервис frontend уже существует в docker-compose.yml."
            else
              echo "Добавляем сервис frontend в docker-compose.yml..."
              # Используем более простой подход с echo вместо heredoc
              echo "" >> docker-compose.yml
              echo "  frontend:" >> docker-compose.yml
              echo "    image: \${DOCKER_USERNAME}/job_solution_frontend:latest" >> docker-compose.yml
              echo "    container_name: job_solution_frontend" >> docker-compose.yml
              echo "    restart: unless-stopped" >> docker-compose.yml
              echo "    depends_on:" >> docker-compose.yml
              echo "      - app" >> docker-compose.yml
              echo "    environment:" >> docker-compose.yml
              echo "      - REACT_APP_API_URL=http://app:8080" >> docker-compose.yml
              echo "    networks:" >> docker-compose.yml
              echo "      - app_network" >> docker-compose.yml
            fi
            
            # Принудительная остановка всех старых контейнеров
            echo "Остановка всех старых контейнеров..."
            docker-compose down || true
            
            # Проверка на наличие "зависших" контейнеров и их удаление
            if docker ps -a | grep "job_solution_"; then
              echo "Обнаружены старые контейнеры, удаляем их принудительно..."
              docker ps -a | grep "job_solution_" | awk '{print $1}' | xargs -r docker rm -f
            fi
            
            # Запуск контейнеров
            echo "Запуск контейнеров..."
            docker-compose up -d
            
            # Очистка неиспользуемых образов
            docker image prune -af
            
            # Проверка статуса
            echo "Статус контейнеров:"
            docker-compose ps
            
            # Проверка логов фронтенда
            echo "Логи фронтенда:"
            docker-compose logs --tail=20 frontend 